#!/usr/bin/env node

const debug = require('debug')('orthology:server');
const http = require('http');
const bunyan = require('bunyan');
const app = require('../app');

const log = bunyan.createLogger({
    name: 'paxdb-API-orthologs',
    module: 'www'
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) { //eslint-disable-line no-restricted-globals
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const server = http.createServer(app);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const bind = typeof port === 'string'
        ? `pipe ${port}`
        : `port ${port}`;
    debug(`Listening on ${bind}`);
}

function boot(neo4jdb) {
    app.set('neo4j', neo4jdb);
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, () => {
        log.info(`Express server listening on port ${app.get('port')}`);
    });
    server.on('error', onError);
    server.on('listening', onListening);
}

function shutdown() {
    server.close();
}

/**
 * for testing purposes, allow this file to be used as a node module
 * and in this case don't start the server (boot):
 */
if (require.main === module) {
    app.connectRetryWithSomeBackoff((neo4j) => {
        // log.info('connected to neo4j!');
        boot(neo4j);
    });
} else {
    log.info('Running app as a module');
    exports.boot = boot;
    exports.shutdown = shutdown;
    exports.port = app.get('port');
}
